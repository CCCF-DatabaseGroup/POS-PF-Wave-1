//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS_PF_Wave_1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POS_PF_Procs_Entities : DbContext
    {
        public POS_PF_Procs_Entities()
            : base("name=POS_PF_Procs_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int abrirCaja(Nullable<int> idCaja, Nullable<int> idCajero, Nullable<int> cantidaApertura, ObjectParameter sesion)
        {
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("idCaja", idCaja) :
                new ObjectParameter("idCaja", typeof(int));
    
            var idCajeroParameter = idCajero.HasValue ?
                new ObjectParameter("idCajero", idCajero) :
                new ObjectParameter("idCajero", typeof(int));
    
            var cantidaAperturaParameter = cantidaApertura.HasValue ?
                new ObjectParameter("cantidaApertura", cantidaApertura) :
                new ObjectParameter("cantidaApertura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("abrirCaja", idCajaParameter, idCajeroParameter, cantidaAperturaParameter, sesion);
        }
    
        public virtual int abrirFactura(Nullable<int> idSesion, Nullable<int> cedula, ObjectParameter idFactura)
        {
            var idSesionParameter = idSesion.HasValue ?
                new ObjectParameter("idSesion", idSesion) :
                new ObjectParameter("idSesion", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("abrirFactura", idSesionParameter, cedulaParameter, idFactura);
        }
    
        public virtual int agregarAcarrito(Nullable<int> idFactura, string ean, Nullable<int> cantidad, ObjectParameter precio, ObjectParameter minimoStock)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            var eanParameter = ean != null ?
                new ObjectParameter("ean", ean) :
                new ObjectParameter("ean", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarAcarrito", idFacturaParameter, eanParameter, cantidadParameter, precio, minimoStock);
        }
    
        public virtual int cerrarCaja(Nullable<int> idSesion, Nullable<int> cantidadClausura, ObjectParameter exito)
        {
            var idSesionParameter = idSesion.HasValue ?
                new ObjectParameter("idSesion", idSesion) :
                new ObjectParameter("idSesion", typeof(int));
    
            var cantidadClausuraParameter = cantidadClausura.HasValue ?
                new ObjectParameter("cantidadClausura", cantidadClausura) :
                new ObjectParameter("cantidadClausura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cerrarCaja", idSesionParameter, cantidadClausuraParameter, exito);
        }
    
        public virtual int cerrarFactura(Nullable<int> idFactura, ObjectParameter exito)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cerrarFactura", idFacturaParameter, exito);
        }
    
        public virtual int imprimirTiquete(Nullable<int> idFactura, ObjectParameter texto)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("imprimirTiquete", idFacturaParameter, texto);
        }
    
        public virtual ObjectResult<loginUsuario_Result> loginUsuario(string nickname, string contrasena)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<loginUsuario_Result>("loginUsuario", nicknameParameter, contrasenaParameter);
        }
    
        public virtual int productoAsucursal(Nullable<int> idSucursal, Nullable<int> idProducto, Nullable<int> cantidad, Nullable<int> cantidadPromedio, Nullable<int> precio, ObjectParameter exito)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("idSucursal", idSucursal) :
                new ObjectParameter("idSucursal", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var cantidadPromedioParameter = cantidadPromedio.HasValue ?
                new ObjectParameter("cantidadPromedio", cantidadPromedio) :
                new ObjectParameter("cantidadPromedio", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("productoAsucursal", idSucursalParameter, idProductoParameter, cantidadParameter, cantidadPromedioParameter, precioParameter, exito);
        }
    
        public virtual int quitarDeCarrito(Nullable<int> idFactura, string ean, Nullable<int> cantidad, ObjectParameter exito)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            var eanParameter = ean != null ?
                new ObjectParameter("ean", ean) :
                new ObjectParameter("ean", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("quitarDeCarrito", idFacturaParameter, eanParameter, cantidadParameter, exito);
        }
    
        public virtual int registrarCliente(Nullable<int> cedula, string nombre, string apellido1, string apellido2, Nullable<System.DateTime> fechaNacimiento, Nullable<int> telefono, string direccion, ObjectParameter exito)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("apellido1", apellido1) :
                new ObjectParameter("apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("apellido2", apellido2) :
                new ObjectParameter("apellido2", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarCliente", cedulaParameter, nombreParameter, apellido1Parameter, apellido2Parameter, fechaNacimientoParameter, telefonoParameter, direccionParameter, exito);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
