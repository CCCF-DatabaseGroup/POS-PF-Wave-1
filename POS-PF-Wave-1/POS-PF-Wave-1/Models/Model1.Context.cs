//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS_PF_Wave_1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POS_PFEntities : DbContext
    {
        public POS_PFEntities()
            : base("name=POS_PFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CAJA> CAJA { get; set; }
        public virtual DbSet<CAJEROS> CAJEROS { get; set; }
        public virtual DbSet<FACTURA> FACTURA { get; set; }
        public virtual DbSet<FARMACIA> FARMACIA { get; set; }
        public virtual DbSet<PERSONA> PERSONA { get; set; }
        public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<RANGO_USUARIO> RANGO_USUARIO { get; set; }
        public virtual DbSet<SUCURSAL> SUCURSAL { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<DETALLES_FACTURA> DETALLES_FACTURA { get; set; }
        public virtual DbSet<PRODUCTOS_SUCURSAL> PRODUCTOS_SUCURSAL { get; set; }
        public virtual DbSet<TRABAJA_EN> TRABAJA_EN { get; set; }
        public virtual DbSet<bajoInventario> bajoInventario { get; set; }
        public virtual DbSet<minutosPromedioCajero> minutosPromedioCajero { get; set; }
        public virtual DbSet<productosMasVendidos> productosMasVendidos { get; set; }
        public virtual DbSet<productosMasVendidosPorCajero> productosMasVendidosPorCajero { get; set; }
        public virtual DbSet<tiempoPromedioCajero> tiempoPromedioCajero { get; set; }
    
        public virtual int abrirCaja(Nullable<int> idCaja, Nullable<int> idCajero, Nullable<int> cantidaApertura, ObjectParameter sesion)
        {
            var idCajaParameter = idCaja.HasValue ?
                new ObjectParameter("idCaja", idCaja) :
                new ObjectParameter("idCaja", typeof(int));
    
            var idCajeroParameter = idCajero.HasValue ?
                new ObjectParameter("idCajero", idCajero) :
                new ObjectParameter("idCajero", typeof(int));
    
            var cantidaAperturaParameter = cantidaApertura.HasValue ?
                new ObjectParameter("cantidaApertura", cantidaApertura) :
                new ObjectParameter("cantidaApertura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("abrirCaja", idCajaParameter, idCajeroParameter, cantidaAperturaParameter, sesion);
        }
    
        public virtual int abrirFactura(Nullable<int> idSesion, Nullable<int> cedula, ObjectParameter idFactura)
        {
            var idSesionParameter = idSesion.HasValue ?
                new ObjectParameter("idSesion", idSesion) :
                new ObjectParameter("idSesion", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("abrirFactura", idSesionParameter, cedulaParameter, idFactura);
        }
    
        public virtual int agregarAcarrito(Nullable<int> idFactura, string ean, Nullable<int> cantidad, ObjectParameter precio, ObjectParameter minimoStock)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            var eanParameter = ean != null ?
                new ObjectParameter("ean", ean) :
                new ObjectParameter("ean", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarAcarrito", idFacturaParameter, eanParameter, cantidadParameter, precio, minimoStock);
        }
    
        public virtual int cerrarCaja(Nullable<int> idSesion, Nullable<int> cantidadClausura, ObjectParameter exito)
        {
            var idSesionParameter = idSesion.HasValue ?
                new ObjectParameter("idSesion", idSesion) :
                new ObjectParameter("idSesion", typeof(int));
    
            var cantidadClausuraParameter = cantidadClausura.HasValue ?
                new ObjectParameter("cantidadClausura", cantidadClausura) :
                new ObjectParameter("cantidadClausura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cerrarCaja", idSesionParameter, cantidadClausuraParameter, exito);
        }
    
        public virtual int cerrarFactura(Nullable<int> idFactura, ObjectParameter exito)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cerrarFactura", idFacturaParameter, exito);
        }
    
        public virtual int imprimirTiquete(Nullable<int> idFactura, ObjectParameter texto)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("imprimirTiquete", idFacturaParameter, texto);
        }
    
        public virtual ObjectResult<loginUsuario_Result> loginUsuario(string nickname, string contrasena)
        {
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<loginUsuario_Result>("loginUsuario", nicknameParameter, contrasenaParameter);
        }
    
        public virtual int quitarDeCarrito(Nullable<int> idFactura, string ean, Nullable<int> cantidad, ObjectParameter exito)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            var eanParameter = ean != null ?
                new ObjectParameter("ean", ean) :
                new ObjectParameter("ean", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("quitarDeCarrito", idFacturaParameter, eanParameter, cantidadParameter, exito);
        }
    
        public virtual int registrarCliente(Nullable<int> cedula, string nombre, string apellido1, string apellido2, Nullable<System.DateTime> fechaNacimiento, Nullable<int> telefono, string direccion, ObjectParameter exito)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellido1Parameter = apellido1 != null ?
                new ObjectParameter("apellido1", apellido1) :
                new ObjectParameter("apellido1", typeof(string));
    
            var apellido2Parameter = apellido2 != null ?
                new ObjectParameter("apellido2", apellido2) :
                new ObjectParameter("apellido2", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var telefonoParameter = telefono.HasValue ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(int));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registrarCliente", cedulaParameter, nombreParameter, apellido1Parameter, apellido2Parameter, fechaNacimientoParameter, telefonoParameter, direccionParameter, exito);
        }
    }
}
